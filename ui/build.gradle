import java.text.SimpleDateFormat

project.ext.lwjglVersion = "3.0.0b"
project.ext.jomlVersion = "1.7.1"

jar.baseName = "matrixstudio-ui"

static def arch() {
    def arch = System.getProperty('os.arch')
    switch (arch) {
        case "x86": case "amd": return "32"
        case "x86_64": case "amd64": return "64"
    }
    return arch
}

static def platform() {
    return System.getProperty('os.name').toLowerCase().split()[0]
}

def allDependenciesForPlatform(String platform) {
    def dependencies = []

    dependencies += project(':core')

    dependencies += "fr.minibilles.basics:core:${basics_version}"
    dependencies += "fr.minibilles.basics:ui-${platform}:${basics_version}"
    dependencies += "org.jocl:jocl:0.1.9"

    return dependencies
}

dependencies {
    // to add new dependencies for compile add them in allDependenciesForPlatform method
    for (def dependency : allDependenciesForPlatform(platform() + arch())) {
        compile dependency
    }
}

task (writeVersion) {
    doLast {
        File versionFile = file('src/main/resources' + '/matrixstudio/ui/version.properties')
        Properties properties = new Properties()
        properties.put("version", version)
        properties.put("date", new SimpleDateFormat('MMMM d\'th\' yyyy', Locale.ENGLISH).format(new Date()))
        properties.put("daily", Boolean.toString(project.ext.daily))
        properties.store(new FileOutputStream(versionFile), "Generated by gradle task")
    }
}

processResources.dependsOn writeVersion

def rootTemplateDir = new File("template");
def destDir = new File(buildDir, "distribution");

def resolvedDependencies(String platform) {
    def configuration = configurations.create("configuration-${platform}")
    for (def dependency : allDependenciesForPlatform(platform)) {
        configuration.dependencies.add(dependencies.create(dependency))
    }

    def result = configuration.resolve()

    // adds this project
    result.add(jar.archivePath)

    return result;
}

task macDistribution(type: Tar, dependsOn: 'assemble') {
    def platform = "mac64"

    def templateDir = new File(rootTemplateDir, "mac")
    def executable = "MatrixStudio.app/Contents/MacOS/MatrixStudio"
    def jarPath = "MatrixStudio.app/Contents/MacOS/jars"

    into (".") {
        from fileTree(templateDir) { exclude(executable) }
        from fileTree(templateDir) {
            include(executable)
            fileMode = 0755
        }
    }

    into (jarPath) { from resolvedDependencies(platform)}

    baseName = "MatrixStudio-${project.ext.daily ? 'daily' : "release"}-${platform}"
    destinationDir = destDir
    extension = 'tar.gz'
    compression = Compression.GZIP
}

task linux64Distribution(type: Tar, dependsOn: 'assemble') {
    def platform = "linux64"

    def templateDir = new File(rootTemplateDir, "linux")
    def executable = "MatrixStudio/MatrixStudio"
    def jarPath = "MatrixStudio/jars"

    into (".") {
        from fileTree(templateDir) { exclude(executable) }
        from fileTree(templateDir) {
            include(executable)
            fileMode = 0755
        }
    }

    into (jarPath) { from resolvedDependencies(platform)}

    baseName = "MatrixStudio-${project.ext.daily ? 'daily' : "release"}-${platform}"
    destinationDir = destDir
    extension = 'tar.gz'
    compression = Compression.GZIP
}

task windows32Distribution(type: Zip, dependsOn: 'assemble') {
    def platform = "windows32"

    def templateDir = new File(rootTemplateDir, "windows")
    def jarPath = "MatrixStudio/jars"

    into (".") { from fileTree(templateDir) }
    into (jarPath) { from resolvedDependencies(platform)}

    baseName = "MatrixStudio-${project.ext.daily ? 'daily' : "release"}-${platform}"
    destinationDir = destDir
}

task windows64Distribution(type: Zip, dependsOn: 'assemble') {
    def platform = "windows64"

    def templateDir = new File(rootTemplateDir, "windows")
    def jarPath = "MatrixStudio/jars"

    into (".") { from fileTree(templateDir) }
    into (jarPath) { from resolvedDependencies(platform)}

    baseName = "MatrixStudio-${project.ext.daily ? 'daily' : "release"}-${platform}"
    destinationDir = destDir
}

task distribution (dependsOn: ['macDistribution','linux64Distribution', "windows32Distribution", "windows64Distribution"])

apply plugin: 'com.jfrog.bintray'

bintrayUpload.dependsOn distribution

String versionName = project.ext.daily ? 'daily' : version
bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")

    filesSpec {
        from files(new File(buildDir, "distribution")) { include("/MatrixStudio-*") }
        into "matrixstudio/${versionName}"
    }
    publish = true
    override = true

    pkg {
        repo = 'generic'
        name = 'matrixstudio'
        userOrg = 'jeancharles-roger'
        githubRepo = 'jeancharles-roger/matrixstudio'
        githubReleaseNotesFile = "ChangeLog.md"

        version {
            name = versionName
        }
    }
}
