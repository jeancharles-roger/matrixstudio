import java.text.SimpleDateFormat

project.ext.lwjglVersion = "3.0.0b"
project.ext.jomlVersion = "1.7.1"

def allDependenciesForPlatform(String platform) {
    def dependencies = []

    dependencies += project(':core')

    dependencies += ':basics'
    dependencies += ':basics-ui'
    dependencies += 'org.jocl:jocl:0.1.9'

    dependencies += "org.lwjgl:lwjgl:${lwjglVersion}"
    dependencies += "org.joml:joml:${jomlVersion}"

    dependencies += ":swt-${platform}"
    switch(platform) {
        case 'windows':
            dependencies += "org.lwjgl:lwjgl-platform:${lwjglVersion}:natives-windows"
            break

        case 'linux':
            dependencies += "org.lwjgl:lwjgl-platform:${lwjglVersion}:natives-linux"
            break

        case 'mac':
            dependencies += ':basics-ui-cocoa'
            dependencies += "org.lwjgl:lwjgl-platform:${lwjglVersion}:natives-osx"
            break

        default:
            throw new Exception('Unknown OS')
    }

    return dependencies
}

dependencies {
    // to add new dependencies for compile add them in allDependenciesForPlatform method
    def platform = System.getProperty('os.name').toLowerCase().split()[0]
    for (def dependency : allDependenciesForPlatform(platform)) {
        compile dependency
    }
}

task (writeVersion) {
    doLast {
        File versionFile = file('src/main/resources' + '/matrixstudio/ui/version.properties')
        Properties properties = new Properties()
        properties.put("version", version)
        properties.put("date", new SimpleDateFormat('MMMM d\'th\' yyyy', Locale.ENGLISH).format(new Date()))
        properties.put("daily", Boolean.toString(project.ext.daily))
        properties.store(new FileOutputStream(versionFile), "Generated by gradle task")
    }
}

processResources.dependsOn writeVersion

def templateDir = new File("template");
def destDir = new File(buildDir, "distribution");

def macTemplateDir = new File(templateDir, "mac")
def macDir = new File(destDir, "mac");
def macExecutable = "MatrixStudio.app/Contents/MacOS/MatrixStudio"
def macJarPath = "MatrixStudio.app/Contents/MacOS/jars"

def resolvedDependencies(String platform) {
    def configuration = configurations.create("configuration-${platform}")
    for (def dependency : allDependenciesForPlatform(platform)) {
        configuration.dependencies.add(dependencies.create(dependency))
    }

    def result = configuration.resolve()

    // adds this project
    result.add(jar.archivePath)

    return result;
}

task macDistribution(type: Tar, dependsOn: 'assemble') {
    String platform = "mac"
    into (".") {
        from fileTree(macTemplateDir) {
            exclude(macExecutable)
        }
        from fileTree(macTemplateDir) {
            include(macExecutable)
            fileMode = 0755
        }
    }

    into (macJarPath) { from resolvedDependencies(platform)}

    baseName = "MatrixStudio-${project.ext.daily ? 'daily' : "release"}-${platform}"
    destinationDir = destDir
    extension = 'tar.gz'
    compression = Compression.GZIP
}

task distribution (dependsOn: 'macDistribution')

apply plugin: 'com.jfrog.bintray'

bintrayUpload.dependsOn 'ui:distribution'

String versionName = project.ext.daily ? 'daily' : version
bintray {
    user = System.getEnv("BINTRAY_USER")
    key = System.getEnv("BINTRAY_KEY")

    filesSpec {
        from files(new File(buildDir, "distribution")) { include("/MatrixStudio-*") }
        into "matrixstudio/${versionName}"
    }
    publish = true
    override = true

    pkg {
        repo = 'generic'
        name = 'matrixstudio'
        userOrg = 'jeancharles-roger'
        githubRepo = 'jeancharles-roger/matrixstudio'
        githubReleaseNotesFile = "ChangeLog.md"

        version {
            name = versionName
        }
    }
}
